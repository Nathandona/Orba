// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String        @id @default(cuid())
  name                  String?
  email                 String        @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  bio                   String?       @db.Text
  location              String?
  company               String?
  jobTitle              String?
  stripeCustomerId      String?       @unique
  stripeSubscriptionId  String?       @unique
  stripePriceId         String?
  stripeCurrentPeriodEnd DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  accounts              Account[]
  sessions              Session[]
  subscription          Subscription?
  projects              Project[]
  tasks                 Task[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeSubscriptionId   String    @unique
  stripeCustomerId       String
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
  stripeStatus           String
  stripeCancelAtPeriodEnd Boolean  @default(false)
  plan                   String    // "starter", "pro", "enterprise"
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  message   String   @db.Text
  status    String   @default("new") // "new", "contacted", "closed"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?         @db.Text
  color       String          @default("bg-blue-500")
  dueDate     DateTime?
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  members     ProjectMember[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model ProjectMember {
  id           String   @id @default(cuid())
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  email        String
  name         String
  role         String   @default("member") // "owner", "admin", "member"
  status       String   @default("pending") // "pending", "active"
  invitedBy    String?
  invitedAt    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([projectId, email])
  @@index([projectId])
  @@index([email])
  @@index([status])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  status      String       @default("todo") // "todo", "in-progress", "review", "done"
  priority    String       @default("medium") // "low", "medium", "high"
  dueDate     DateTime?
  labels      String[]     @default([])
  assignee    String?
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  position    Int          @default(0) // For ordering within column
  comments    Comment[]
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([projectId])
  @@index([userId])
  @@index([status])
  @@index([position])
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  userName  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([createdAt])
}

model Attachment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fileName  String
  fileSize  Int
  fileType  String
  fileUrl   String
  uploadedBy String
  createdAt DateTime @default(now())

  @@index([taskId])
}
