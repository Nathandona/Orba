generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(cuid())
  name                   String?
  email                  String        @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  bio                    String?
  location               String?
  company                String?
  jobTitle               String?
  stripeCustomerId       String?       @unique
  stripeSubscriptionId   String?       @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  accounts               Account[]
  projects               Project[]
  sessions               Session[]
  subscription           Subscription?
  tasks                  Task[]
  createdTemplates       ProjectTemplate[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  stripeSubscriptionId    String   @unique
  stripeCustomerId        String
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeStatus            String
  stripeCancelAtPeriodEnd Boolean  @default(false)
  plan                    String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  message   String
  status    String   @default("new")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  color       String          @default("bg-blue-500")
  dueDate     DateTime?
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  columns     Column[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]

  @@index([userId])
  @@index([createdAt])
}

model Column {
  id        String   @id @default(cuid())
  title     String
  color     String   @default("border-gray-500")
  position  Int      @default(0)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@unique([projectId, title])
  @@index([projectId])
  @@index([position])
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  email     String
  name      String
  role      String   @default("member")
  status    String   @default("pending")
  invitedBy String?
  invitedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@index([projectId])
  @@index([email])
  @@index([status])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  priority    String       @default("medium")
  dueDate     DateTime?
  labels      String[]     @default([])
  assignee    String?
  projectId   String
  userId      String
  position    Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  columnId    String?
  attachments Attachment[]
  comments    Comment[]
  column      Column?      @relation(fields: [columnId], references: [id])
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@index([columnId])
  @@index([position])
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  userName  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([createdAt])
}

model ProjectTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String
  category      String
  plan          String   @default("free") // free, premium
  color         String   @default("bg-blue-500")
  columns       Json     // Store template columns as JSON
  sampleTasks   Json?    // Store sample tasks as JSON (optional)
  isPublic      Boolean  @default(true)
  isActive      Boolean  @default(true)
  createdById   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     User?    @relation(fields: [createdById], references: [id])

  @@index([plan])
  @@index([category])
  @@index([isActive])
}

model Attachment {
  id         String   @id @default(cuid())
  taskId     String
  fileName   String
  fileSize   Int
  fileType   String
  fileUrl    String
  uploadedBy String
  createdAt  DateTime @default(now())
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}
